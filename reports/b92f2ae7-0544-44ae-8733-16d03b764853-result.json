{"name": "test_register", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=115.0.5790.111)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00FF1C63+49427]\n\t(No symbol) [0x00F85F51]\n\t(No symbol) [0x00E8C64D]\n\t(No symbol) [0x00E732E5]\n\t(No symbol) [0x00ED868B]\n\t(No symbol) [0x00EE6A63]\n\t(No symbol) [0x00ED4816]\n\t(No symbol) [0x00EB1127]\n\t(No symbol) [0x00EB22AD]\n\tGetHandleVerifier [0x01247159+2496009]\n\tGetHandleVerifier [0x0128D582+2783794]\n\tGetHandleVerifier [0x012874A1+2758993]\n\tGetHandleVerifier [0x010711E0+571024]\n\t(No symbol) [0x00F8F97A]\n\t(No symbol) [0x00F8BD98]\n\t(No symbol) [0x00F8BE7B]\n\t(No symbol) [0x00F7EAA7]\n\tBaseThreadInitThunk [0x779A00C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77DC7B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77DC7AEE+238]", "trace": "self = <testcase.test_register.Test_register object at 0x000001EBA3938130>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3ec57ea7c11ecc8982b4947e105b3e96\")>\n\n    def test_register(self, setup):\n        self.driver = setup\n        self.driver.get(self.base_url)\n        self.driver.implicitly_wait(10)\n        self.re = Register(self.driver)\n>       self.re.click_register_link()\n\ntestcase\\test_register.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobject\\register.py:25: in click_register_link\n    self.driver.find_element(*Register.register_link_link_text).click()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EBA3938640>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DC7B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DC7AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=115.0.5790.111)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00FF1C63+49427]\nE       \t(No symbol) [0x00F85F51]\nE       \t(No symbol) [0x00E8C64D]\nE       \t(No symbol) [0x00E732E5]\nE       \t(No symbol) [0x00ED868B]\nE       \t(No symbol) [0x00EE6A63]\nE       \t(No symbol) [0x00ED4816]\nE       \t(No symbol) [0x00EB1127]\nE       \t(No symbol) [0x00EB22AD]\nE       \tGetHandleVerifier [0x01247159+2496009]\nE       \tGetHandleVerifier [0x0128D582+2783794]\nE       \tGetHandleVerifier [0x012874A1+2758993]\nE       \tGetHandleVerifier [0x010711E0+571024]\nE       \t(No symbol) [0x00F8F97A]\nE       \t(No symbol) [0x00F8BD98]\nE       \t(No symbol) [0x00F8BE7B]\nE       \t(No symbol) [0x00F7EAA7]\nE       \tBaseThreadInitThunk [0x779A00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DC7B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DC7AEE+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "8771aa34-37e9-43fb-9546-2cd2c75e2797-attachment.txt", "type": "text/plain"}], "start": 1691386715763, "stop": 1691386718508, "uuid": "5661adcf-41e4-4755-bf2f-acd60606cd7f", "historyId": "857d9d3be3531f2071585c514b6417c4", "testCaseId": "857d9d3be3531f2071585c514b6417c4", "fullName": "testcase.test_register.Test_register#test_register", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_register"}, {"name": "subSuite", "value": "Test_register"}, {"name": "host", "value": "Dell-PC"}, {"name": "thread", "value": "14620-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_register"}]}